Cluster -> conjunto de máquinas (nodes) que, juntas, tem um grande poder computacional
Cluster master -> controla os processos do que os outros nós vão fazer

Cada máquina possui uma quantidade de vCPU e Memória. O k8s sabe o total de recursos disponíveis pra disponibilizar baseado nisso.


Pods -> Unidade que contém os containers provisionados. Representa os processos rodando no cluster. Menor objeto do kubernetes.
"uma máquina dentro do k8s, com ip"
Normalmente 1 container por pod, mas pode ter-se mais de um container por pod.


Replica Set -> Replica pods para termos mais persistencia. Caso um pod caia, outro é recriado
O ReplicaSet tem um problema: para atualizarmos um pod com uma imagem diferente do docker, por exemplo, temos que deletar todos os pods.


Deployment -> Administra o ReplicaSet. Caso um Deployment seja atualizado ele cria um novo ReplicaSet com novos Pods.
No dia a dia utilizaremos o Deployment.

Deployment --> ReplicaSet --> Pod


Services -> São a porta de entrada da nossa aplicação. Funcionam como um Load Balancer.
Um IP aponta pra um service. ClusterIP, NodePort, LoadBalancer (com ip externo) são exemplos.



Objetos de configuração -> Configuração de ambientes 

*Atualizar o configmap não atualiza o deployment. Temos que reiniciá-lo para aplicar as modificações.


Probes

Liveness: verifica se a aplicação está de pé (live). Configuramos para verificar de tempo em tempo, e caso esteja down, reiniciar os pods
Readiness: verifica se a aplicação subiu e redireciona o tráfego quando a aplicação subiu


HPA - Horizontal Pod Autoscaling

Precisamos do Metric Server, que vem por padrão nos servidores na nuvem, mas no kind é necessário instalar. Ele é responsável por fornecer
a métrica para o HPA de uso de CPU e memória dos pods que utilizamos.


Teste de stress

- Fortio: https://github.com/fortio/fortio
- K6: https://github.com/grafana/k6


Volumes persistentes


- Pool de storage: estático, separa um espaço do disco pra aplicação. Normalmente utilizado OnPremisse

- Storage class: dinamico, utilizado em nuvem. Disponibiliza o espaço dinamicamente em nuvem.

- AccessMode ReadWriteOnce - outros pods não podem acessar os dados no pod


Stateless e Stateful

Quando queremos subir uma aplicação de banco de dados (Stateful), precisamos que ela suba de forma ordenada.
Suponha que tenhamos um pod rodando o MySQL num pod e ele será o Master. Num outro pod rodamos uma instância MySQL Slave de leitura, que consome os dados do Master.
Precisamos que o Master suba primeiro e depois o Slave, pois este tem uma dependência do anterior.

Pra isso trabalhamos com um objeto do k8s chamado StatefulSet. Ele cria os pods numa ordem definida.


Headless Service

Não tem um IP, é apenas um apontamento de DNS